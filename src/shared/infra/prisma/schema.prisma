generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id() @default(uuid())
  name            String
  username        String
  document        String?
  bornAt          DateTime?
  phoneNumber     String?
  cellphoneNumber String?
  email           String?
  addressState    String?
  addressCity     String?
  addressDistrict String?
  addressStreet   String?
  addressNumber   String?
  permission      String
  avatar          String?
  password        String
  status          Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt()
  Service         Service[]
}

model Service {
  id                      String            @id() @default(uuid())
  client                  Client            @relation(references: [id], fields: [clientId])
  vehicle                 Vehicle           @relation(references: [id], fields: [vehicleId])
  client_observation      String?
  responsible_observation String?
  delivery                DateTime
  price                   Float
  status                  String
  user                    User              @relation(fields: [responsible], references: [id])
  responsible             String
  serviceProducts         ServiceProducts[]
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt()
  clientId                String
  vehicleId               String
}

model Product {
  id              String            @id() @default(uuid())
  barCode         String?
  name            String
  brand           String?
  quantity        Int?
  minQuantity     Int?
  valueToBuy      Float?
  valueToSell     Float?
  description     String
  category        Category?         @relation(references: [id], fields: [categoryId])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt()
  ServiceProducts ServiceProducts[]
  categoryId      String?
}

model ServiceProducts {
  id        String   @id() @default(uuid())
  service   Service  @relation(references: [id], fields: [serviceId])
  serviceId String
  product   Product? @relation(references: [id], fields: [productId])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  productId String?
}

model Client {
  id              String    @id() @default(uuid())
  name            String
  document        String
  bornAt          DateTime
  phoneNumber     String
  cellphoneNumber String
  email           String
  cep             String
  addressState    String
  addressCity     String
  addressDistrict String
  addressStreet   String
  addressNumber   String
  vehicle         Vehicle[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt()
  Service         Service[]
}

model Vehicle {
  id         String    @id() @default(uuid())
  model      String
  plate      String
  brand      String
  launchYear DateTime
  modelYear  DateTime
  fuel       String
  color      String
  Client     Client?   @relation(fields: [clientId], references: [id])
  clientId   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt()
  Service    Service[]
}

model Category {
  id        String    @id() @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  Product   Product[]
}
